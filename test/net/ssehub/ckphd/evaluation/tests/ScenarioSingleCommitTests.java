/*
 * Copyright 2020 University of Hildesheim, Software Systems Engineering
 *
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
 * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package net.ssehub.ckphd.evaluation.tests;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

import java.io.File;
import java.util.List;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import net.ssehub.ckphd.evaluation.utilities.FileUtilities;
import net.ssehub.ckphd.evaluation.utilities.FileUtilitiesException;

/**
 * This class contains unit tests that check the behavior of the entire tool, if a commit sequence with a single commit
 * is applied.
 * 
 * @author Christian Kroeher
 *
 */
public class ScenarioSingleCommitTests extends AbstractScenarioTests {
    
    /**
     * The {@link String} denoting the name of the file representing the repository archive file used in these scenario
     * tests.
     */
    private static final String REPOSITORY_ARCHIVE_FILE_NAME = "repository.zip";
    
    /**
     * The {@link File} denoting the repository archive file used in these scenario tests.
     */
    private static final File REPOSITORY_ARCHIVE_FILE = new File(AllTests.TEST_DATA_DIRECTORY,
            REPOSITORY_ARCHIVE_FILE_NAME);
    
    /**
     * The {@link String} denoting the name of the directory representing the commit sequence directory used in these
     * scenario tests.
     */
    private static final String COMMIT_SEQUENCE_DIRECTORY_NAME = "test_commit-sequence_valid";
    
    /**
     * The {@link File} denoting the commit sequence directory used in these scenario tests.
     */
    private static final File COMMIT_SEQUENCE_DIRECTORY = new File(AllTests.TEST_DATA_DIRECTORY,
            COMMIT_SEQUENCE_DIRECTORY_NAME);
    
    /**
     * Sets up the elements required by the tests in this class by calling
     * {@link AbstractScenarioTests#setUp(File, File)} with the {@link #REPOSITORY_ARCHIVE_FILE} and the
     * {@link #COMMIT_SEQUENCE_DIRECTORY} defined for these tests.
     */
    @BeforeClass
    public static void setUp() {
        AbstractScenarioTests.setUp(REPOSITORY_ARCHIVE_FILE, COMMIT_SEQUENCE_DIRECTORY);
    }
    
    /**
     * Deletes all elements required by the tests in this class by calling {@link AbstractScenarioTests#tearDown()}.
     */
    @AfterClass
    public static void tearDown() {
        AbstractScenarioTests.tearDown();
    }

    /**
     * Tests whether the number of commits in the commit sequence is equal to the number of available commit files in
     * the {@link #COMMIT_SEQUENCE_DIRECTORY}.
     */
    @Test
    public void testNumbersOfCommitSequenceCommitsAndCommitFilesEqual() {
        assertEquals(commitSequence.size(), commitFiles.length,
                "Number of elements in commit sequence does not match number of available commit files");
    }
    
    /**
     * Tests whether the number of commits in the commit sequence is equal to the number of git diff output files
     * generated by the pre-commit hook for each of the applied commits.
     */
    @Test
    public void testNumbersOfCommitSequenceCommitsAndGitDiffFilesEqual() {
        assertEquals(commitSequence.size(), gitDiffOutputFiles.length,
                "Number of elements in commit sequence does not match number git diff output files");
    }
    
    /**
     * Tests whether for each git diff output file generated by the pre-commit hook a corresponding commit file in the
     * current commit sequence exists, which introduces the same changes.
     */
    @Test
    public void testCommitFileDiffAndGitDiffDiffEqual() {
        File gitDiffOutputFile = null;
        List<String> gitDiffOutputFileContent = null;
        File commitFile = null;
        List<String> commitFileContent = null;
        for (int i = 0; i < gitDiffOutputFiles.length; i++) {
            gitDiffOutputFile = gitDiffOutputFiles[i];
            commitFile = getCommitFile(commitFiles, commitSequence.get(i));
            try {
                gitDiffOutputFileContent = FileUtilities.getInstance().readFile(gitDiffOutputFile);
                commitFileContent = FileUtilities.getInstance().readFile(commitFile);
            } catch (FileUtilitiesException e) {
                fail(e);
            }
            compareDiff(gitDiffOutputFileContent, commitFileContent);
        }
    }
    
}
